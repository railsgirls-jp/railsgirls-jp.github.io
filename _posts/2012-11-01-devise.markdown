---
layout: default
title: Devise で認証機能を追加
permalink: devise
---

# Devise で認証機能を追加

*Created by Piotr Steininger, [@polishprince](https://twitter.com/polishprince)*

** このガイドは、すでに [ RailsGrils アプリ・チュートリアル ](/app) でアプリを作った方を対象にしています。 **



## Step 0: devise gem を追加

アプリの `Gemfile` を開いて、次の行を追加します。

{% highlight ruby %}
gem 'devise'
{% endhighlight %}

そして、ターミナルもしくはコマンドプロンプト(Windows用)を開いてアプリのディレクトリへ移動し、次のコマンドを実行しましょう。

{% highlight sh %}
bundle install
{% endhighlight %}

gem のインストールができました。Rails のサーバーを再起動するのを忘れずに!


## Step 1: アプリに devise をセットアップ

次は、先ほどのディレクトリでこのコマンドを実行しましょう。

{% highlight sh %}
rails g devise:install
{% endhighlight %}


## Step 2: Devise の環境設定

environments ファイルにデフォルトの url オプションを定義します。
`config/environments/development.rb` を開いて次の行を追加しましょう。

{% highlight ruby %}
   config.action_mailer.default_url_options = { :host => 'localhost:3000' }
{% endhighlight %}

`end` と書かれているところの前に追加してください。

次は `config/routes.rb` を開いて次の行を追加します。
{% highlight ruby %}
   root :to => "home#index"
{% endhighlight %}

これも `end` の前に追加してください。

さらに `app/views/layouts/application.html.erb` を開いて、

{% highlight erb %}
    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>
{% endhighlight %}

これらを、次の行の上に追加します。

{% highlight ruby %}
   <%= yield %>
{% endhighlight %}

最後に、 [ heroku にアプリをアップ ](/heroku) する予定があれば、 `config/application.rb` に次の行も追加してください。

{% highlight ruby %}
  config.assets.initialize_on_precompile = false
{% endhighlight %}

これは下から３行目（2つ目の `end` の上）に追加してください。


## Step 3: User model をセットアップ

Deviseユーザー用にセットアップされた User model を作るために bundled generator script を使います。

{% highlight sh %}
   rails g devise user
{% endhighlight %}

新しい `app/models/user.rb` のためにいくつか変更が加えられ、 db/migrate ディレクトリにも migration が追加されます。

ここで、

{% highlight sh %}
  rake db:migrate
{% endhighlight %}

を実行してデータベースをセットアップしておきましょう。


## Step 4: ユーザーを作成

User model の設定の仕方によっては、ブラウザ上で簡単に user アカウントを登録することができます。
その場合はサーバーを起動して、 [http://localhost:3000/users/sign_up](http://localhost:3000/users/sign_up) にアクセスします。

または rails console を起動し user アカウントを作ることができます。

{% highlight sh %}
 rails c
{% endhighlight %}

上記のコマンドを実行したら、次のコマンドを実行して user を設定します。（email等の値は好きなように変更してください。rails consoleを終了するには、exitと入力します。）

{% highlight ruby %}
 User.create(:email=>"me@example.com",:password => "test123", :password_confirmation => "test123")
{% endhighlight %}

これで [http://localhost:3000/users/sign_in](http://localhost:3000/users/sign_in) にログインすることができます。

## Step 5: サインアップとログインリンクの追加

あと、やらなければいけないことは、ユーザーがログインできる適切なリンク、または案内をナビゲーションバー右上のコーナーに追加することです。
そのために、 `app/views/layouts/application.html.erb` の次のあたりを変更します。

{% highlight ruby %}
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <a class="brand" href="/">The Idea app</a>
      <ul class="nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</div>
{% endhighlight %}

これを、次のようにします。

{% highlight ruby %}
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <a class="brand" href="/">The Idea app</a>
      <ul class="nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
      <p class="navbar-text pull-right">
        <% if user_signed_in? %>
          Logged in as <strong><%= current_user.email %></strong>.
          <%= link_to 'Edit profile', edit_user_registration_path, :class => 'navbar-link' %> |
          <%= link_to "Logout", destroy_user_session_path, method: :delete, :class => 'navbar-link'  %>
        <% else %>
          <%= link_to "Sign up", new_user_registration_path, :class => 'navbar-link'  %> |
          <%= link_to "Login", new_user_session_path, :class => 'navbar-link'  %>
        <% end %>
      </p>
    </div>
  </div>
</div>
{% endhighlight %}

ログインしたりログアウトしたりして、テストしてみてください。

## 次は？

* User model のその他の項目も追加しましょう。
* users と ideas 間のリレーションを追加しましょう。
* それぞれ自分の ideas だけ編集できるように users に制限をかけましょう。
* ロールやパーミッションを使うように拡張しましょう。（ CanCan のような人気の認証 gem も使ってみてください。）


