---
layout: default
title: Rails Girls アプリ・チュートリアル
permalink: app
---

# Rails Girls アプリ・チュートリアル

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**まず、Railsがインストールされていることを確認してください。** [**もしくはこちらのリンクを見てインストールしてください。**](/install)

## ツールを知る

### <i class="icon-text-editor">&nbsp;</i> テキストエディタ

[Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com), Vim や Emacs は、テキストエディタの例です。コードを書いたりファイルを編集したりすることができます。

### <i class="icon-prompt">&nbsp;</i> ターミナル (Windows の場合はコマンドプロンプト)

rails serverを起動したりコマンドを実行したりするものです。

### <i class="icon-browser">&nbsp;</i> Webブラウザ (Firefox, Safari, Chrome)

アプリケーションを表示するためのものです。

## *1.*アプリケーションを作る

*railsgirls* という名前の Rails アプリを作っていきます。

まず、Terminal を開いてください。

* OS X: Spotlightで *Terminal* と入力して出てきた Terminal をクリックしてください。
* Windows: スタートメニューをクリックして、すべてのプログラムから *RailsInstaller* を探し、*Command Prompt with Ruby on Rails*をクリックしてください。(みつからない場合は、「プログラムとファイルの検索」へ *Command Prompt with Ruby on Rails* を入力し検索してください。)
* Linux (Ubuntu/Fedora): Dashホームで *Terminal* を探して、*Terminal* をクリックしてください。
* クラウドサービス(Nitrousなど): 作成したアカウントでログインし、box が起動した状態で IDE 画面へ移動します。(詳細は [インストール・レシピ](/install#using-a-cloud-service) を参照してください。) ターミナルはブラウザの下部に表示されます。

そして、Terminal上で次のコマンドを入力します:

{% highlight sh %}
mkdir projects
cd projects
rails new railsgirls
cd railsgirls
rails server
{% endhighlight %}

自分のパソコン上のブラウザで <http://localhost:3000> にアクセスしてください。(Nitorous.IOなどのクラウドサービスの場合は、```rails server -b 0.0.0.0```を実行してサーバを起動し直した後でURLをアドレス欄に入力する代わりに、メニューから 'preview' - 'port 3000' を選んでください。詳細は [インストール・レシピ](/install#using-a-cloud-service) を参照してください。)

"Yay! You’re on Rails!" の画面が表示されれば、さきほど作ったアプリは正しく動作しています。

Terminal 上で CTRL-C（CTRL(Control)キーとCを同時に押す)を実行してサーバを終了します。(WindowsでCTRL-Cで終了しない場合は、CTRL-PAUSEを試してください。)

**Coachより:** それぞれのコマンドが何なのか説明してみましょう。何が生成されましたか？そしてサーバーは何をしますか？


## *2.*Idea の scaffold をする

Rails の scaffold 機能を使って、list, add, remove, edit, view を生成します。これが Rails アプリの最初の一歩です。
ここでは ideas という名前で作ります。

**Coachより:** scaffold とはなんでしょう？ (コマンドの説明をしてください。1. ただのコマンド, 2. モデル名でDBテーブルと関係があるもの;命名規約, 3. 属性や型) また、migration 機能が何で、なぜ必要なのか。

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

scaffold は新しいファイルをプロジェクトのディレクトリに追加しますが、意図したように動作させるためには以下の 2 つのコマンドを実行してデータベースの更新と Rails server プロセスをリスタートする必要があります。

{% highlight sh %}
rails db:migrate
rails server
{% endhighlight %}

ブラウザで [http://localhost:3000/ideas](http://localhost:3000/ideas) にアクセスしてください。(Nitrous のようなクラウドサービスの場合は、```rails server -b 0.0.0.0```を実行してサーバを起動し直してメニューから 'preview' - 'port 3000' を選び、アドレス欄の末尾に '/ideas' を加えてアクセスしてください。詳細は [インストール・レシピ](/install#using-a-cloud-service) を参照してください。)

いろいろクリックしてみたりしたら、 CTRL-C を押して、サーバを終了します。(WindowsでCTRL-Cで終了しない場合は、CTRL-PAUSEを試してください。)

## *3.*デザインする

**Coachより:** HTML と Railsの関係について話してみましょう。views のどの部分が HTML で、どこが Embedded Ruby (ERB)ですか？どうやってこれらが MVC (モデルとコントローラが、動的に HTML や views を生成するロジックを管理しているもの) と関連づけられていますか？

そのままのデザインはイケてないので、何かやってみましょう。Twitter Bootstrapフレームワークを使うと、ホント簡単に、いい感じのスタイルに変えられます。

テキストエディタで `app/views/layouts/application.html.erb` (Windowsの場合  `app¥views¥layouts¥application.html.erb`) を開くと、次の行があります。

{% highlight erb %}
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
{% endhighlight %}

この1行前に次のタグを追記してください。

{% highlight erb %}
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css">
{% endhighlight %}

そして、この部分、

{% highlight erb %}
<%= yield %>
{% endhighlight %}

これを次のように置き換えてください。

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

次に、ナビゲーションバーとフッターをレイアウトに追加してみましょう。同じファイルの`<body>`の直後に以下を追加してください。

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">The Idea app</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

さらに、`</body>` の直前に以下を追加してください。

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls 2017
  </div>
</footer>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
{% endhighlight %}

ここで、ideasの表のスタイルも変更してみましょう。`app/assets/stylesheets/application.css` を開いて、コードの一番下に次のcssを追加しましょう。


{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

ファイルがきちんと保存されたことを確認して、何が変わったのかを見るためにブラウザを更新してみましょう。
さらに、HTMLとCSSに変更を加えることもできます。

JavaScriptやCoffeeScriptを実行する環境に問題があるというようなエラーメッセージがTerminalに表示された場合、
[nodejsをインストール](/install#install-node)してください。
この問題は、RailsInstallerを使っている場合は起こらないはずです。
(ただし、Railsを```gem install rails```コマンドでインストールしている場合には起こるかもしれません)

**Coachより:** CSSとレイアウトについてちょっと話をしてください。

## *4.*写真アップロード機能を追加する

Rails にファイルをアップロードする機能を追加するには、ライブラリをインストールする必要があります。

プロジェクトディレクトリ内の `Gemfile` を開いて、この行

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

の直後に、次の一行を追加します。

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Coachより:** 何のライブラリがあって、なぜ便利なのかを説明してください。オープンソースソフトウェアが何なのかも説明してください。

サーバーを終了するためには、`CTRL-C`を押します。

Terminal で、次のコマンドを実行してください:

{% highlight sh %}
bundle
{% endhighlight %}

そうすると、次のコマンドでアップロードを実行するコードを生成できます:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

それでは、Railsのサーバーを起動してみましょう。

**ノート**: 人によっては、コマンドを入力する用のTerminalとは別のTerminalでRailsのサーバを動かしているかもしれません。
もしそうなら、**Railsのサーバープロセスを再起動する**必要があります。

`app/models/idea.rb` を開いて、次の行

{% highlight ruby %}
class Idea < ApplicationRecord
{% endhighlight %}

の直後に、

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

を追加します。さらに、`app/views/ideas/_form.html.erb` を開いて次のように編集します。

{% highlight erb %}
<%= form.text_field :picture, id: :idea_picture %>
{% endhighlight %}

&nbsp;&nbsp;&#8595;

{% highlight erb %}
<%= form.file_field :picture, id: :idea_picture %>
{% endhighlight %}

場合によっては、 *TypeError: can't cast ActionDispatch::Http::UploadedFile to string* というエラーが起きることもあります。エラーになった場合は、 `app/views/ideas/_form.html.erb` の

{% highlight erb %}
<%= form_with(model: idea, local: true) do |form| %>
{% endhighlight %}

上記のコードを、以下のように変更してみてください。

{% highlight erb %}
<%= form_with(model: idea, local: true, html: {multipart: true}) do |form| %>
{% endhighlight %}

画像をアップロードするとわかりますが、これだけでは見栄えのいいものではありません。ファイルのpathだけを表示してるので、これもいじってみましょう。

`app/views/ideas/show.html.erb` を開いて編集します。

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

&nbsp;&nbsp;&#8595;

{% highlight erb %}
<%= image_tag(@idea.picture_url, width: 600) if @idea.picture.present? %>
{% endhighlight %}


**Coachより:** HTML についてちょっと話してください。


## *5.*routes を調整する

<http://localhost:3000> を開いてみてください(クラウドサービスの場合は preview してください)。まだデフォルトページが見えると思います。ideas ページにリダイレクトするようにしましょう。

`config/routes.rb` を開いて、最初の行の次に以下のコードを追記してください:

{% highlight ruby %}
root to: redirect('/ideas')
{% endhighlight %}

ルートパス(<http://localhost:3000/> またはクラウドサービスの場合は preview )をブラウザで表示して変更点を確認しましょう。

**Coachより:** routes について話してください。

## アプリにページを追加する

アプリに開発者(あなたです！)の情報を表示できるようにページを追加してみましょう。

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

このコマンドはプロジェクトの `app/views` 以下に `/pages` へのアクセスに対応するための新しいディレクトリを追加します。そこに `info.html.erb` という名前のあなたの情報のためのページが作られます。

また、以下のシンプルなルーティングも routes.rb に追加されます。

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

それでは、プロジェクトの `app/views/pages/info.html.erb` をテキストエディタで開いてあなたの情報を HTML で追記しましょう。その後はブラウザで [http://localhost:3000/pages/info](http://localhost:3000/pages/info) を開いて(またはクラウドサービスでは preview してアドレス欄の末尾に '/pages/info' を加えてアクセスして) 作成したページを確認してみましょう。

## 次は？

* HTML や CSS を使ってデザインを追加しましょう。
* アイデアの素晴らしさ評価値の項目を追加しましょう。
* CoffeeScript (or JavaScript) を使って動きをつけてみましょう。
* 写真のロードを早くするために、適切な写真のリサイズ機能を追加しましょう。


## その他の手引き

* Guide 0: [Handy cheatsheet for Ruby, Rails, console etc.](https://github.com/PragTob/rails-beginner-cheatsheet)
* Guide 1: [Add commenting by Janika Liiv](/commenting)
* Guide 2: [Put your app online with Heroku by Terence Lee](/heroku) / [Put your app online with OpenShift by Katie Miller](/openshift) / [Put your app online with Shelly Cloud](/shellycloud) / [Put your app online with anynines](/anynines) / [Put your app online with Trucker.io](/trucker)
* Guide 3: [Create thumbnail images for the uploads by Miha Filej](/thumbnails)
* Guide 4: [Add design using HTML &amp; CSS by Alex Liao](/design)
* Guide 5: [Add Authentication (user accounts) with Devise by Piotr Steininger](/devise)
* Guide 6: [Adding profile pictures with Gravatar](/gravatar)
* Guide 7: [Test your app with RSpec](/testing-rspec)
* Guide 8: [Continuous Deployment with Travis-CI](/continuous-travis) / [Continuous Deployment with Codeship](/continuous)
* Guide 9: [Go through additional explanations for the App by Lucy Bain](https://github.com/lbain/railsgirls)
